import {
  SIGNATURE_SCHEME_TO_FLAG,
  ZkLoginPublicIdentifier,
  decodeJwt,
  genAddressSeed,
  getExtendedEphemeralPublicKey,
  getZkLoginSignature,
  hashASCIIStrToField,
  normalizeZkLoginIssuer,
  parseZkLoginSignature,
  poseidonHash,
  toBigEndianBytes,
  toPaddedBigEndianBytes,
  toZkLoginPublicIdentifier
} from "./chunk-PTBBFSUW.js";
import "./chunk-FH65H56I.js";
import {
  SUI_ADDRESS_LENGTH,
  base64urlnopad,
  blake2b,
  bytesToHex,
  normalizeSuiAddress,
  randomBytes,
  toHex
} from "./chunk-6XQOA6MW.js";
import "./chunk-WOOG5QLI.js";

// node_modules/@mysten/sui/dist/esm/zklogin/address.js
function computeZkLoginAddressFromSeed(addressSeed, iss, legacyAddress = true) {
  const addressSeedBytesBigEndian = legacyAddress ? toBigEndianBytes(addressSeed, 32) : toPaddedBigEndianBytes(addressSeed, 32);
  const addressParamBytes = new TextEncoder().encode(normalizeZkLoginIssuer(iss));
  const tmp = new Uint8Array(2 + addressSeedBytesBigEndian.length + addressParamBytes.length);
  tmp.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);
  tmp.set([addressParamBytes.length], 1);
  tmp.set(addressParamBytes, 2);
  tmp.set(addressSeedBytesBigEndian, 2 + addressParamBytes.length);
  return normalizeSuiAddress(
    bytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2)
  );
}
var MAX_HEADER_LEN_B64 = 248;
var MAX_PADDED_UNSIGNED_JWT_LEN = 64 * 25;
function lengthChecks(jwt) {
  const [header, payload] = jwt.split(".");
  if (header.length > MAX_HEADER_LEN_B64) {
    throw new Error(`Header is too long`);
  }
  const L = (header.length + 1 + payload.length) * 8;
  const K = (512 + 448 - (L % 512 + 1)) % 512;
  const padded_unsigned_jwt_len = (L + 1 + K + 64) / 8;
  if (padded_unsigned_jwt_len > MAX_PADDED_UNSIGNED_JWT_LEN) {
    throw new Error(`JWT is too long`);
  }
}
function jwtToAddress(jwt, userSalt, legacyAddress = false) {
  lengthChecks(jwt);
  const decodedJWT = decodeJwt(jwt);
  return computeZkLoginAddress({
    userSalt,
    claimName: "sub",
    claimValue: decodedJWT.sub,
    aud: decodedJWT.aud,
    iss: decodedJWT.iss,
    legacyAddress
  });
}
function computeZkLoginAddress({
  claimName,
  claimValue,
  iss,
  aud,
  userSalt,
  legacyAddress = false
}) {
  return computeZkLoginAddressFromSeed(
    genAddressSeed(userSalt, claimName, claimValue, aud),
    iss,
    legacyAddress
  );
}

// node_modules/@mysten/sui/dist/esm/zklogin/nonce.js
var NONCE_LENGTH = 27;
function toBigIntBE(bytes) {
  const hex = toHex(bytes);
  if (hex.length === 0) {
    return BigInt(0);
  }
  return BigInt(`0x${hex}`);
}
function generateRandomness() {
  return String(toBigIntBE(randomBytes(16)));
}
function generateNonce(publicKey, maxEpoch, randomness) {
  const publicKeyBytes = toBigIntBE(publicKey.toSuiBytes());
  const eph_public_key_0 = publicKeyBytes / 2n ** 128n;
  const eph_public_key_1 = publicKeyBytes % 2n ** 128n;
  const bigNum = poseidonHash([eph_public_key_0, eph_public_key_1, maxEpoch, BigInt(randomness)]);
  const Z = toPaddedBigEndianBytes(bigNum, 20);
  const nonce = base64urlnopad.encode(Z);
  if (nonce.length !== NONCE_LENGTH) {
    throw new Error(`Length of nonce ${nonce} (${nonce.length}) is not equal to ${NONCE_LENGTH}`);
  }
  return nonce;
}
export {
  ZkLoginPublicIdentifier,
  computeZkLoginAddress,
  computeZkLoginAddressFromSeed,
  decodeJwt,
  genAddressSeed,
  generateNonce,
  generateRandomness,
  getExtendedEphemeralPublicKey,
  getZkLoginSignature,
  hashASCIIStrToField,
  jwtToAddress,
  parseZkLoginSignature,
  poseidonHash,
  toBigEndianBytes,
  toPaddedBigEndianBytes,
  toZkLoginPublicIdentifier
};
//# sourceMappingURL=@mysten_sui_zklogin.js.map
