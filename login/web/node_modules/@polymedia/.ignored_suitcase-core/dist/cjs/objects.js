"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.objResToContent = objResToContent;
exports.objResToDisplay = objResToDisplay;
exports.newEmptyDisplay = newEmptyDisplay;
exports.objResToFields = objResToFields;
exports.objResToId = objResToId;
exports.objResToOwner = objResToOwner;
exports.objResToRef = objResToRef;
exports.objResToType = objResToType;
const guards_js_1 = require("./guards.js");
/**
 * Validate a `SuiObjectResponse` and return its `.data.content`.
 */
function objResToContent(resp) {
    if (resp.error) {
        throw Error(`response error: ${JSON.stringify(resp, null, 2)}`);
    }
    if (!resp.data?.content) {
        throw Error(`response has no content: ${JSON.stringify(resp, null, 2)}`);
    }
    return resp.data.content;
}
/**
 * Validate a `SuiObjectResponse` and return its `.data.display.data` or `null`.
 */
function objResToDisplay(resp) {
    if (resp.error) {
        throw Error(`response error: ${JSON.stringify(resp, null, 2)}`);
    }
    if (!resp.data?.display) {
        throw Error(`response has no display: ${JSON.stringify(resp, null, 2)}`);
    }
    return {
        ...newEmptyDisplay(),
        ...resp.data.display.data,
    };
}
/**
 * Create an `ObjectDisplay` object with all fields set to `null`.
 */
function newEmptyDisplay() {
    return {
        name: null,
        description: null,
        link: null,
        image_url: null,
        thumbnail_url: null,
        project_name: null,
        project_url: null,
        project_image_url: null,
        creator: null,
    };
}
/**
 * Validate a `SuiObjectResponse` and return its `.data.content.fields`.
 */
function objResToFields(resp) {
    if (resp.error) {
        throw Error(`response error: ${JSON.stringify(resp, null, 2)}`);
    }
    if (resp.data?.content?.dataType !== "moveObject") {
        throw Error(`response content missing: ${JSON.stringify(resp, null, 2)}`);
    }
    return resp.data.content.fields; // eslint-disable-line @typescript-eslint/no-explicit-any
}
/**
 * Validate a `SuiObjectResponse` and return its `.data.objectId`.
 */
function objResToId(resp) {
    if (resp.error) {
        throw Error(`response error: ${JSON.stringify(resp, null, 2)}`);
    }
    if (!resp.data) {
        throw Error(`response has no data: ${JSON.stringify(resp, null, 2)}`);
    }
    return resp.data.objectId;
}
/**
 * Validate a `SuiObjectResponse` and return its owner: an address, object ID, "shared" or "immutable".
 */
function objResToOwner(resp) {
    if (resp.error) {
        throw Error(`response error: ${JSON.stringify(resp, null, 2)}`);
    }
    if (!resp.data?.owner) {
        throw Error(`response has no owner data: ${JSON.stringify(resp, null, 2)}`);
    }
    if ((0, guards_js_1.isOwnerKind)(resp.data.owner, "AddressOwner")) {
        return resp.data.owner.AddressOwner;
    }
    if ((0, guards_js_1.isOwnerKind)(resp.data.owner, "ObjectOwner")) {
        return resp.data.owner.ObjectOwner;
    }
    if ((0, guards_js_1.isOwnerKind)(resp.data.owner, "Shared")) {
        return "shared";
    }
    if ((0, guards_js_1.isOwnerKind)(resp.data.owner, "Immutable")) {
        return "immutable";
    }
    return "unknown";
}
/**
 * Validate a `SuiObjectResponse` and return its `{.data.objectId, .data.digest, .data.version}`.
 */
function objResToRef(resp) {
    if (resp.error) {
        throw Error(`response error: ${JSON.stringify(resp, null, 2)}`);
    }
    if (!resp.data) {
        throw Error(`response has no data: ${JSON.stringify(resp, null, 2)}`);
    }
    return {
        objectId: resp.data.objectId,
        digest: resp.data.digest,
        version: resp.data.version,
    };
}
/**
 * Validate a `SuiObjectResponse` and return its `.data.content.type`.
 */
function objResToType(resp) {
    if (resp.error) {
        throw Error(`response error: ${JSON.stringify(resp, null, 2)}`);
    }
    if (!resp.data?.content) {
        throw Error(`response has no content: ${JSON.stringify(resp, null, 2)}`);
    }
    if (!(0, guards_js_1.isParsedDataKind)(resp.data.content, "moveObject")) {
        throw Error(`response data is not a moveObject: ${JSON.stringify(resp, null, 2)}`);
    }
    return resp.data.content.type;
}
//# sourceMappingURL=objects.js.map