import { ComponentProps, ReactNode, RefObject } from "react";
import { useFetchAndPaginate } from "./hooks";
import { LinkExternal } from "./links";
/**
 * A button component.
 */
export declare const Btn: ({ onClick, children, disabled, className, }: {
    onClick: () => Promise<unknown>;
    children: ReactNode;
    disabled?: boolean;
    className?: string;
}) => import("react/jsx-runtime").JSX.Element;
export declare const BtnSubmit: typeof Btn;
export declare const BtnLinkExternal: (props: ComponentProps<typeof LinkExternal> & {
    disabled?: boolean;
}) => import("react/jsx-runtime").JSX.Element;
export declare const BtnLinkInternal: import("react").ForwardRefExoticComponent<Omit<import("react-router-dom").LinkProps & import("react").RefAttributes<HTMLAnchorElement> & {
    disabled?: boolean;
}, "ref"> & import("react").RefAttributes<HTMLAnchorElement>>;
/**
 * A button component to navigate through paginated data (see `useFetchAndPaginate()`).
 */
export declare const BtnPrevNext: ({ data, onPageChange, scrollToRefOnPageChange, }: {
    data: ReturnType<typeof useFetchAndPaginate>;
    onPageChange?: () => void;
    scrollToRefOnPageChange?: RefObject<HTMLElement | null>;
}) => import("react/jsx-runtime").JSX.Element | null;
