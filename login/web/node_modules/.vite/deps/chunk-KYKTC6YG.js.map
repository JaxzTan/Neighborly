{
  "version": 3,
  "sources": ["../../@polymedia/suitcase-core/src/misc.ts", "../../@polymedia/suitcase-core/src/guards.ts", "../../@polymedia/suitcase-core/src/objects.ts", "../../@polymedia/suitcase-core/src/SuiClientBase.ts", "../../@polymedia/suitcase-core/src/SuiEventFetcher.ts", "../../@polymedia/suitcase-core/src/rpcs.ts", "../../@polymedia/suitcase-core/src/SuiMultiClient.ts", "../../@polymedia/suitcase-core/src/addresses.ts", "../../@polymedia/suitcase-core/src/apis.ts", "../../@polymedia/suitcase-core/src/balances.ts", "../../@polymedia/suitcase-core/src/constants.ts", "../../@polymedia/suitcase-core/src/clients.ts", "../../@polymedia/suitcase-core/src/coins.ts", "../../@polymedia/suitcase-core/src/errors.ts", "../../@mysten/sui/src/faucet/faucet.ts", "../../@polymedia/suitcase-core/src/faucets.ts", "../../@polymedia/suitcase-core/src/format.ts", "../../@noble/curves/src/secp256k1.ts", "../../@noble/hashes/src/legacy.ts", "../../@scure/bip32/index.ts", "../../@mysten/sui/src/keypairs/secp256k1/publickey.ts", "../../@mysten/sui/src/keypairs/secp256k1/keypair.ts", "../../@mysten/sui/src/keypairs/secp256r1/publickey.ts", "../../@mysten/sui/src/keypairs/secp256r1/keypair.ts", "../../@polymedia/suitcase-core/src/keypairs.ts", "../../@polymedia/suitcase-core/src/txs.ts", "../../@polymedia/suitcase-core/src/types.ts", "../../@polymedia/suitcase-core/src/urls.ts", "../../@polymedia/suitcase-core/src/index.ts"],
  "sourcesContent": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport class FaucetRateLimitError extends Error {}\n\ntype FaucetCoinInfo = {\n\tamount: number;\n\tid: string;\n\ttransferTxDigest: string;\n};\n\ntype FaucetResponse = {\n\ttransferredGasObjects: FaucetCoinInfo[];\n\terror?: string | null;\n};\n\ntype BatchFaucetResponse = {\n\ttask?: string | null;\n\terror?: string | null;\n};\n\ntype BatchSendStatusType = {\n\tstatus: 'INPROGRESS' | 'SUCCEEDED' | 'DISCARDED';\n\ttransferred_gas_objects: { sent: FaucetCoinInfo[] };\n};\n\ntype BatchStatusFaucetResponse = {\n\tstatus: BatchSendStatusType;\n\terror?: string | null;\n};\n\ntype FaucetResponseV2 = {\n\tstatus: 'Success' | FaucetFailure;\n\tcoins_sent: FaucetCoinInfo[] | null;\n};\n\ntype FaucetFailure = {\n\tFailure: {\n\t\tinternal: string;\n\t};\n};\n\ntype FaucetRequest = {\n\thost: string;\n\tpath: string;\n\tbody?: Record<string, any>;\n\theaders?: HeadersInit;\n\tmethod: 'GET' | 'POST';\n};\n\nasync function faucetRequest<T>({ host, path, body, headers, method }: FaucetRequest): Promise<T> {\n\tconst endpoint = new URL(path, host).toString();\n\tconst res = await fetch(endpoint, {\n\t\tmethod,\n\t\tbody: body ? JSON.stringify(body) : undefined,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(headers || {}),\n\t\t},\n\t});\n\n\tif (res.status === 429) {\n\t\tthrow new FaucetRateLimitError(\n\t\t\t`Too many requests from this client have been sent to the faucet. Please retry later`,\n\t\t);\n\t}\n\n\ttry {\n\t\tconst parsed = await res.json();\n\t\treturn parsed as T;\n\t} catch (e) {\n\t\tthrow new Error(\n\t\t\t`Encountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`,\n\t\t);\n\t}\n}\n\n/**\n * @deprecated(\"Use requestSuiFromFaucetV2 instead\")\n */\nexport async function requestSuiFromFaucetV0(input: {\n\thost: string;\n\trecipient: string;\n\theaders?: HeadersInit;\n}): Promise<FaucetResponse> {\n\tconst response = await faucetRequest<FaucetResponse>({\n\t\thost: input.host,\n\t\tpath: '/gas',\n\t\tbody: {\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient: input.recipient,\n\t\t\t},\n\t\t},\n\t\theaders: input.headers,\n\t\tmethod: 'POST',\n\t});\n\n\tif (response.error) {\n\t\tthrow new Error(`Faucet request failed: ${response.error}`);\n\t}\n\n\treturn response;\n}\n\n/**\n * @deprecated(\"Use requestSuiFromFaucetV2 instead\")\n */\nexport async function requestSuiFromFaucetV1(input: {\n\thost: string;\n\trecipient: string;\n\theaders?: HeadersInit;\n}): Promise<BatchFaucetResponse> {\n\tconst response = await faucetRequest<BatchFaucetResponse>({\n\t\thost: input.host,\n\t\tpath: '/v1/gas',\n\t\tbody: {\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient: input.recipient,\n\t\t\t},\n\t\t},\n\t\theaders: input.headers,\n\t\tmethod: 'POST',\n\t});\n\n\tif (response.error) {\n\t\tthrow new Error(`Faucet request failed: ${response.error}`);\n\t}\n\n\treturn response;\n}\n\nexport async function requestSuiFromFaucetV2(input: {\n\thost: string;\n\trecipient: string;\n\theaders?: HeadersInit;\n}) {\n\tconst response = await faucetRequest<FaucetResponseV2>({\n\t\thost: input.host,\n\t\tpath: '/v2/gas',\n\t\tbody: {\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient: input.recipient,\n\t\t\t},\n\t\t},\n\t\theaders: input.headers,\n\t\tmethod: 'POST',\n\t});\n\n\tif (response.status !== 'Success') {\n\t\tthrow new Error(`Faucet request failed: ${response.status.Failure.internal}`);\n\t}\n\n\treturn response;\n}\n\n/**\n * @deprecated(\"Use requestSuiFromFaucetV2 which returns directly a success or failure status\")\n */\nexport async function getFaucetRequestStatus(input: {\n\thost: string;\n\ttaskId: string;\n\theaders?: HeadersInit;\n}) {\n\tconst response = await faucetRequest<BatchStatusFaucetResponse>({\n\t\thost: input.host,\n\t\tpath: `/v1/status/${input.taskId}`,\n\t\theaders: input.headers,\n\t\tmethod: 'GET',\n\t});\n\n\tif (response.error) {\n\t\tthrow new Error(`Faucet request failed: ${response.error}`);\n\t}\n\n\treturn response;\n}\n\nexport function getFaucetHost(network: 'testnet' | 'devnet' | 'localnet') {\n\tswitch (network) {\n\t\tcase 'testnet':\n\t\t\treturn 'https://faucet.testnet.sui.io';\n\t\tcase 'devnet':\n\t\t\treturn 'https://faucet.devnet.sui.io';\n\t\tcase 'localnet':\n\t\t\treturn 'http://127.0.0.1:9123';\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown network: ${network}`);\n\t}\n}\n", null, null, "/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.ts';\nimport type { CurveLengths } from './abstract/curve.ts';\nimport {\n  createHasher,\n  type H2CHasher,\n  type H2CMethod,\n  isogenyMap,\n} from './abstract/hash-to-curve.ts';\nimport { Field, mapHashToField, mod, pow2 } from './abstract/modular.ts';\nimport {\n  _normFnElement,\n  type EndomorphismOpts,\n  mapToCurveSimpleSWU,\n  type WeierstrassPoint as PointType,\n  type WeierstrassOpts,\n  type WeierstrassPointCons,\n} from './abstract/weierstrass.ts';\nimport type { Hex, PrivKey } from './utils.ts';\nimport {\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n  utf8ToBytes,\n} from './utils.ts';\n\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE: WeierstrassOpts<bigint> = {\n  p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n  Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\n\nconst secp256k1_ENDO: EndomorphismOpts = {\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n  basises: [\n    [BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')],\n    [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')],\n  ],\n};\n\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1_CURVE.p;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1_CURVE.p, { sqrt: sqrtMod });\n\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = secp256k1.keygen();\n * const msg = new TextEncoder().encode('hello');\n * const sig = secp256k1.sign(msg, secretKey);\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n * ```\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  { ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(utf8ToBytes(tag));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toBytes(true).slice(1);\nconst Pointk1 = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y: bigint) => y % _2n === _0n;\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  const { Fn, BASE } = Pointk1;\n  const d_ = _normFnElement(Fn, priv);\n  const p = BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = hasEven(p.y) ? d_ : Fn.neg(d_);\n  return { scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  const Fp = Fpk1;\n  if (!Fp.isValidNot0(x)) throw new Error('invalid x: Fail if x ≥ p');\n  const xx = Fp.create(x * x);\n  const c = Fp.create(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = Fp.sqrt(c); // Let y = c^(p+1)/4 mod p. Same as sqrt().\n  // Return the unique point P such that x(P) = x and\n  // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  if (!hasEven(y)) y = Fp.neg(y);\n  const p = Pointk1.fromAffine({ x, y });\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return Pointk1.Fn.create(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(secretKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message: Hex, secretKey: PrivKey, auxRand: Hex = randomBytes(32)): Uint8Array {\n  const { Fn } = Pointk1;\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = Fn.toBytes(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  // Let k' = int(rand) mod n. Fail if k' = 0. Let R = k'⋅G\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(rand);\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(Fn.toBytes(Fn.create(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const { Fn, BASE } = Pointk1;\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1_CURVE.p)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1_CURVE.n)) return false;\n    // int(challenge(bytes(r)||bytes(P)||m))%n\n    const e = challenge(Fn.toBytes(r), pointToBytes(P), m);\n    // R = s⋅G - e⋅P, where -eP == (n-e)P\n    const R = BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(Fn.neg(e)));\n    const { x, y } = R.toAffine();\n    // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    if (R.is0() || !hasEven(y) || x !== r) return false;\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  keygen: (seed?: Uint8Array) => { secretKey: Uint8Array; publicKey: Uint8Array };\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  Point: WeierstrassPointCons<bigint>;\n  utils: {\n    randomSecretKey: (seed?: Uint8Array) => Uint8Array;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    lift_x: typeof lift_x;\n    taggedHash: typeof taggedHash;\n\n    /** @deprecated use `randomSecretKey` */\n    randomPrivateKey: (seed?: Uint8Array) => Uint8Array;\n    /** @deprecated use `utils` */\n    numberToBytesBE: typeof numberToBytesBE;\n    /** @deprecated use `utils` */\n    bytesToNumberBE: typeof bytesToNumberBE;\n    /** @deprecated use `modular` */\n    mod: typeof mod;\n  };\n  lengths: CurveLengths;\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = schnorr.keygen();\n * // const publicKey = schnorr.getPublicKey(secretKey);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, secretKey);\n * const isValid = schnorr.verify(sig, msg, publicKey);\n * ```\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => {\n  const size = 32;\n  const seedLength = 48;\n  const randomSecretKey = (seed = randomBytes(seedLength)): Uint8Array => {\n    return mapHashToField(seed, secp256k1_CURVE.n);\n  };\n  // TODO: remove\n  secp256k1.utils.randomSecretKey;\n  function keygen(seed?: Uint8Array) {\n    const secretKey = randomSecretKey(seed);\n    return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };\n  }\n  return {\n    keygen,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    Point: Pointk1,\n    utils: {\n      randomSecretKey: randomSecretKey,\n      randomPrivateKey: randomSecretKey,\n      taggedHash,\n\n      // TODO: remove\n      lift_x,\n      pointToBytes,\n      numberToBytesBE,\n      bytesToNumberBE,\n      mod,\n    },\n    lengths: {\n      secretKey: size,\n      publicKey: size,\n      publicKeyHasPrefix: false,\n      signature: size * 2,\n      seed: seedLength,\n    },\n  };\n})();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\n\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher: H2CHasher<bigint> = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.Point,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const hashToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.hashToCurve)();\n\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const encodeToCurve: H2CMethod<bigint> = /* @__PURE__ */ (() =>\n  secp256k1_hasher.encodeToCurve)();\n", "/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.ts';\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\n\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n\n/** SHA1 legacy hash class. */\nexport class SHA1 extends HashMD<SHA1> {\n  private A = SHA1_IV[0] | 0;\n  private B = SHA1_IV[1] | 0;\n  private C = SHA1_IV[2] | 0;\n  private D = SHA1_IV[3] | 0;\n  private E = SHA1_IV[4] | 0;\n\n  constructor() {\n    super(64, 20, 8, false);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { A, B, C, D, E } = this;\n    return [A, B, C, D, E];\n  }\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 80; i++)\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n    // Compression function main loop, 80 rounds\n    let { A, B, C, D, E } = this;\n    for (let i = 0; i < 80; i++) {\n      let F, K;\n      if (i < 20) {\n        F = Chi(B, C, D);\n        K = 0x5a827999;\n      } else if (i < 40) {\n        F = B ^ C ^ D;\n        K = 0x6ed9eba1;\n      } else if (i < 60) {\n        F = Maj(B, C, D);\n        K = 0x8f1bbcdc;\n      } else {\n        F = B ^ C ^ D;\n        K = 0xca62c1d6;\n      }\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n      E = D;\n      D = C;\n      C = rotl(B, 30);\n      B = A;\n      A = T;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    this.set(A, B, C, D, E);\n  }\n  protected roundClean(): void {\n    clean(SHA1_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\n\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\n);\n\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nexport class MD5 extends HashMD<MD5> {\n  private A = MD5_IV[0] | 0;\n  private B = MD5_IV[1] | 0;\n  private C = MD5_IV[2] | 0;\n  private D = MD5_IV[3] | 0;\n\n  constructor() {\n    super(64, 16, 8, true);\n  }\n  protected get(): [number, number, number, number] {\n    const { A, B, C, D } = this;\n    return [A, B, C, D];\n  }\n  protected set(A: number, B: number, C: number, D: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D } = this;\n    for (let i = 0; i < 64; i++) {\n      let F, g, s;\n      if (i < 16) {\n        F = Chi(B, C, D);\n        g = i;\n        s = [7, 12, 17, 22];\n      } else if (i < 32) {\n        F = Chi(D, B, C);\n        g = (5 * i + 1) % 16;\n        s = [5, 9, 14, 20];\n      } else if (i < 48) {\n        F = B ^ C ^ D;\n        g = (3 * i + 5) % 16;\n        s = [4, 11, 16, 23];\n      } else {\n        F = C ^ (B | ~D);\n        g = (7 * i) % 16;\n        s = [6, 10, 15, 21];\n      }\n      F = F + A + K[i] + MD5_W[g];\n      A = D;\n      D = C;\n      C = B;\n      B = B + rotl(F, s[i % 4]);\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    this.set(A, B, C, D);\n  }\n  protected roundClean(): void {\n    clean(MD5_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\n\n// RIPEMD-160\n\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n  const L = [Id160];\n  const R = [Pi160];\n  const res = [L, R];\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\n  return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\n\nconst shifts160 = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  if (group === 1) return (x & y) | (~x & z);\n  if (group === 2) return (x | ~y) ^ z;\n  if (group === 3) return (x & z) | (y & ~z);\n  return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean(): void {\n    clean(BUF_160);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\n", "/**\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\n * @example\n * ```js\n * import { HDKey } from \"@scure/bip32\";\n * const hdkey1 = HDKey.fromMasterSeed(seed);\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\n *\n * // props\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\n * const sig = hdkey3.sign(hash);\n * hdkey3.verify(hash, sig);\n * ```\n */\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { mod } from '@noble/curves/abstract/modular';\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/legacy';\nimport { sha256, sha512 } from '@noble/hashes/sha2';\nimport {\n  abytes,\n  bytesToHex,\n  concatBytes,\n  createView,\n  hexToBytes,\n  utf8ToBytes,\n} from '@noble/hashes/utils';\nimport { createBase58check } from '@scure/base';\n\nconst Point = secp.ProjectivePoint;\nconst base58check = createBase58check(sha256);\n\nfunction bytesToNumber(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  const h = bytes.length === 0 ? '0' : bytesToHex(bytes);\n  return BigInt('0x' + h);\n}\n\nfunction numberToBytes(num: bigint): Uint8Array {\n  if (typeof num !== 'bigint') throw new Error('bigint expected');\n  return hexToBytes(num.toString(16).padStart(64, '0'));\n}\n\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\nexport const HARDENED_OFFSET: number = 0x80000000;\n\nexport interface Versions {\n  private: number;\n  public: number;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  versions?: Versions;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode?: Uint8Array;\n  publicKey?: Uint8Array;\n  privateKey?: Uint8Array | bigint;\n}\n\nexport class HDKey {\n  get fingerprint(): number {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get pubKeyHash(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get privateKey(): Uint8Array | null {\n    return this.privKeyBytes || null;\n  }\n  get publicKey(): Uint8Array | null {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey(): string {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\n    );\n  }\n  get publicExtendedKey(): string {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    abytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        'HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\n          seed.length\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32),\n    });\n  }\n\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\n    const keyView = createView(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45),\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\n    } else {\n      return new HDKey({ ...opt, publicKey: key });\n    }\n  }\n\n  public static fromJSON(json: { xpriv: string }): HDKey {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  public readonly versions: Versions;\n  public readonly depth: number = 0;\n  public readonly index: number = 0;\n  public readonly chainCode: Uint8Array | null = null;\n  public readonly parentFingerprint: number = 0;\n  private privKey?: bigint;\n  private privKeyBytes?: Uint8Array;\n  private pubKey?: Uint8Array;\n  private pubHash: Uint8Array | undefined;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode || null;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey =\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n\n  public derive(path: string): HDKey {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      const m1 = m && m[1];\n      if (!m || m.length !== 3 || typeof m1 !== 'string')\n        throw new Error('invalid child index: ' + c);\n      let idx = +m1;\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      // hardened key\n      if (m[2] === \"'\") {\n        idx += HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  public deriveChild(index: number): HDKey {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= HARDENED_OFFSET) {\n      // Hardened\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n      data = concatBytes(new Uint8Array([0]), priv, data);\n    } else {\n      // Normal child: serP(point(kpar)) || ser32(index)\n      data = concatBytes(this.pubKey, data);\n    }\n    const I = hmac(sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt: HDKeyOpt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n    };\n    try {\n      // Private parent key -> private child key\n      if (this.privateKey) {\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\n        if (added.equals(Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  public sign(hash: Uint8Array): Uint8Array {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    abytes(hash, 32);\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\n  }\n\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\n    abytes(hash, 32);\n    abytes(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n\n  public wipePrivateData(): this {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  public toJSON(): { xpriv: string; xpub: string } {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey,\n    };\n  }\n\n  private serialize(version: number, key: Uint8Array) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    abytes(key, 33);\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    return concatBytes(\n      toU32(version),\n      new Uint8Array([this.depth]),\n      toU32(this.parentFingerprint),\n      toU32(this.index),\n      this.chainCode,\n      key\n    );\n  }\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport {\n\tbytesEqual,\n\tparseSerializedKeypairSignature,\n\tPublicKey,\n} from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey extends PublicKey {\n\tstatic SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256k1PublicKey object\n\t * @param value secp256k1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256k1 public keys are equal\n\t */\n\toverride equals(publicKey: Secp256k1PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256k1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256k1'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedKeypairSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'Secp256k1') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn secp256k1.verify(\n\t\t\tsecp256k1.Signature.fromCompact(bytes),\n\t\t\tsha256(message),\n\t\t\tthis.toRawBytes(),\n\t\t);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { HDKey } from '@scure/bip32';\n\nimport { decodeSuiPrivateKey, encodeSuiPrivateKey, Keypair } from '../../cryptography/keypair.js';\nimport { isValidBIP32Path, mnemonicToSeed } from '../../cryptography/mnemonics.js';\nimport type { PublicKey } from '../../cryptography/publickey.js';\nimport type { SignatureScheme } from '../../cryptography/signature-scheme.js';\nimport { Secp256k1PublicKey } from './publickey.js';\n\nexport const DEFAULT_SECP256K1_DERIVATION_PATH = \"m/54'/784'/0'/0/0\";\n\n/**\n * Secp256k1 Keypair data\n */\nexport interface Secp256k1KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Secp256k1 Keypair used for signing transactions.\n */\nexport class Secp256k1Keypair extends Keypair {\n\tprivate keypair: Secp256k1KeypairData;\n\n\t/**\n\t * Create a new keypair instance.\n\t * Generate random keypair if no {@link Secp256k1Keypair} is provided.\n\t *\n\t * @param keypair secp256k1 keypair\n\t */\n\tconstructor(keypair?: Secp256k1KeypairData) {\n\t\tsuper();\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tconst secretKey: Uint8Array = secp256k1.utils.randomPrivateKey();\n\t\t\tconst publicKey: Uint8Array = secp256k1.getPublicKey(secretKey, true);\n\n\t\t\tthis.keypair = { publicKey, secretKey };\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair Secp256k1\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'Secp256k1';\n\t}\n\n\t/**\n\t * Generate a new random keypair\n\t */\n\tstatic generate(): Secp256k1Keypair {\n\t\treturn new Secp256k1Keypair();\n\t}\n\n\t/**\n\t * Create a keypair from a raw secret key byte array.\n\t *\n\t * This method should only be used to recreate a keypair from a previously\n\t * generated secret key. Generating keypairs from a random seed should be done\n\t * with the {@link Keypair.fromSeed} method.\n\t *\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array  or Bech32 secret key string\n\t * @param options: skip secret key validation\n\t */\n\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array | string,\n\t\toptions?: { skipValidation?: boolean },\n\t): Secp256k1Keypair {\n\t\tif (typeof secretKey === 'string') {\n\t\t\tconst decoded = decodeSuiPrivateKey(secretKey);\n\n\t\t\tif (decoded.schema !== 'Secp256k1') {\n\t\t\t\tthrow new Error(`Expected a Secp256k1 keypair, got ${decoded.schema}`);\n\t\t\t}\n\n\t\t\treturn this.fromSecretKey(decoded.secretKey, options);\n\t\t}\n\n\t\tconst publicKey: Uint8Array = secp256k1.getPublicKey(secretKey, true);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst msgHash = bytesToHex(blake2b(signData, { dkLen: 32 }));\n\t\t\tconst signature = secp256k1.sign(msgHash, secretKey);\n\t\t\tif (!secp256k1.verify(signature, msgHash, publicKey, { lowS: true })) {\n\t\t\t\tthrow new Error('Provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Secp256k1Keypair({ publicKey, secretKey });\n\t}\n\n\t/**\n\t * Generate a keypair from a 32 byte seed.\n\t *\n\t * @param seed seed byte array\n\t */\n\tstatic fromSeed(seed: Uint8Array): Secp256k1Keypair {\n\t\tconst publicKey = secp256k1.getPublicKey(seed, true);\n\t\treturn new Secp256k1Keypair({ publicKey, secretKey: seed });\n\t}\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tgetPublicKey(): PublicKey {\n\t\treturn new Secp256k1PublicKey(this.keypair.publicKey);\n\t}\n\t/**\n\t * The Bech32 secret key string for this Secp256k1 keypair\n\t */\n\tgetSecretKey(): string {\n\t\treturn encodeSuiPrivateKey(this.keypair.secretKey, this.getKeyScheme());\n\t}\n\n\t/**\n\t * Return the signature for the provided data.\n\t */\n\tasync sign(data: Uint8Array) {\n\t\tconst msgHash = sha256(data);\n\t\tconst sig = secp256k1.sign(msgHash, this.keypair.secretKey, {\n\t\t\tlowS: true,\n\t\t});\n\t\treturn sig.toCompactRawBytes();\n\t}\n\n\t/**\n\t * Derive Secp256k1 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/54'/784'/0'/0/0, otherwise the path must\n\t * be compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Secp256k1Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_SECP256K1_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidBIP32Path(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\tconst key = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path);\n\t\tif (key.publicKey == null || key.privateKey == null) {\n\t\t\tthrow new Error('Invalid key');\n\t\t}\n\t\treturn new Secp256k1Keypair({\n\t\t\tpublicKey: key.publicKey,\n\t\t\tsecretKey: key.privateKey,\n\t\t});\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\nimport { secp256r1 } from '@noble/curves/p256';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport { bytesEqual, PublicKey } from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\nimport { parseSerializedSignature } from '../../cryptography/signature.js';\n\nconst SECP256R1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256r1 public key\n */\nexport class Secp256r1PublicKey extends PublicKey {\n\tstatic SIZE = SECP256R1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256r1PublicKey object\n\t * @param value secp256r1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256r1 public keys are equal\n\t */\n\toverride equals(publicKey: Secp256r1PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256r1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256r1'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'Secp256r1') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn secp256r1.verify(\n\t\t\tsecp256r1.Signature.fromCompact(bytes),\n\t\t\tsha256(message),\n\t\t\tthis.toRawBytes(),\n\t\t);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { secp256r1 } from '@noble/curves/p256';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { HDKey } from '@scure/bip32';\n\nimport { decodeSuiPrivateKey, encodeSuiPrivateKey, Keypair } from '../../cryptography/keypair.js';\nimport { isValidBIP32Path, mnemonicToSeed } from '../../cryptography/mnemonics.js';\nimport type { PublicKey } from '../../cryptography/publickey.js';\nimport type { SignatureScheme } from '../../cryptography/signature-scheme.js';\nimport { Secp256r1PublicKey } from './publickey.js';\n\nexport const DEFAULT_SECP256R1_DERIVATION_PATH = \"m/74'/784'/0'/0/0\";\n\n/**\n * Secp256r1 Keypair data\n */\nexport interface Secp256r1KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Secp256r1 Keypair used for signing transactions.\n */\nexport class Secp256r1Keypair extends Keypair {\n\tprivate keypair: Secp256r1KeypairData;\n\n\t/**\n\t * Create a new keypair instance.\n\t * Generate random keypair if no {@link Secp256r1Keypair} is provided.\n\t *\n\t * @param keypair Secp256r1 keypair\n\t */\n\tconstructor(keypair?: Secp256r1KeypairData) {\n\t\tsuper();\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tconst secretKey: Uint8Array = secp256r1.utils.randomPrivateKey();\n\t\t\tconst publicKey: Uint8Array = secp256r1.getPublicKey(secretKey, true);\n\n\t\t\tthis.keypair = { publicKey, secretKey };\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair Secp256r1\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'Secp256r1';\n\t}\n\n\t/**\n\t * Generate a new random keypair\n\t */\n\tstatic generate(): Secp256r1Keypair {\n\t\treturn new Secp256r1Keypair();\n\t}\n\n\t/**\n\t * Create a keypair from a raw secret key byte array.\n\t *\n\t * This method should only be used to recreate a keypair from a previously\n\t * generated secret key. Generating keypairs from a random seed should be done\n\t * with the {@link Keypair.fromSeed} method.\n\t *\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array or Bech32 secret key string\n\t * @param options: skip secret key validation\n\t */\n\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array | string,\n\t\toptions?: { skipValidation?: boolean },\n\t): Secp256r1Keypair {\n\t\tif (typeof secretKey === 'string') {\n\t\t\tconst decoded = decodeSuiPrivateKey(secretKey);\n\n\t\t\tif (decoded.schema !== 'Secp256r1') {\n\t\t\t\tthrow new Error(`Expected a Secp256r1 keypair, got ${decoded.schema}`);\n\t\t\t}\n\n\t\t\treturn this.fromSecretKey(decoded.secretKey, options);\n\t\t}\n\n\t\tconst publicKey: Uint8Array = secp256r1.getPublicKey(secretKey, true);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst msgHash = bytesToHex(blake2b(signData, { dkLen: 32 }));\n\t\t\tconst signature = secp256r1.sign(msgHash, secretKey, { lowS: true });\n\t\t\tif (!secp256r1.verify(signature, msgHash, publicKey, { lowS: true })) {\n\t\t\t\tthrow new Error('Provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Secp256r1Keypair({ publicKey, secretKey });\n\t}\n\n\t/**\n\t * Generate a keypair from a 32 byte seed.\n\t *\n\t * @param seed seed byte array\n\t */\n\tstatic fromSeed(seed: Uint8Array): Secp256r1Keypair {\n\t\tconst publicKey = secp256r1.getPublicKey(seed, true);\n\t\treturn new Secp256r1Keypair({ publicKey, secretKey: seed });\n\t}\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tgetPublicKey(): PublicKey {\n\t\treturn new Secp256r1PublicKey(this.keypair.publicKey);\n\t}\n\n\t/**\n\t * The Bech32 secret key string for this Secp256r1 keypair\n\t */\n\tgetSecretKey(): string {\n\t\treturn encodeSuiPrivateKey(this.keypair.secretKey, this.getKeyScheme());\n\t}\n\n\t/**\n\t * Return the signature for the provided data.\n\t */\n\tasync sign(data: Uint8Array) {\n\t\tconst msgHash = sha256(data);\n\t\tconst sig = secp256r1.sign(msgHash, this.keypair.secretKey, {\n\t\t\tlowS: true,\n\t\t});\n\t\treturn sig.toCompactRawBytes();\n\t}\n\n\t/**\n\t * Derive Secp256r1 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/74'/784'/0'/0/0, otherwise the path must\n\t * be compliant to BIP-32 in form m/74'/784'/{account_index}'/{change_index}/{address_index}.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Secp256r1Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_SECP256R1_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidBIP32Path(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\t// We use HDKey which is hardcoded to use Secp256k1 but since we only need the 32 bytes for the private key it's okay to use here as well.\n\t\tconst privateKey = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path).privateKey;\n\t\treturn Secp256r1Keypair.fromSecretKey(privateKey!);\n\t}\n}\n", null, null, null, null, null],
  "mappings": "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",
  "names": ["num", "TimeUnit", "createHasher", "K", "num", "sha256", "sha256", "sha256", "sha256"]
}
