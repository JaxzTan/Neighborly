"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcRadioSelector = void 0;
exports.loadRpc = loadRpc;
exports.switchRpc = switchRpc;
const jsx_runtime_1 = require("react/jsx-runtime");
const suitcase_core_1 = require("@polymedia/suitcase-core");
const selectors_1 = require("./selectors");
/**
 * A radio button menu to select an RPC endpoint and save the choice to local storage.
 */
const RpcRadioSelector = ({ network, selectedRpc, supportedRpcs = suitcase_core_1.RPC_ENDPOINTS[network], onSwitch, className = "", }) => {
    const options = supportedRpcs.map(rpc => ({
        value: rpc,
        label: rpc
    }));
    const onSelect = (newRpc) => {
        switchRpc({
            network,
            newRpc,
            supportedRpcs,
            defaultRpc: supportedRpcs[0],
            onSwitch
        });
    };
    return ((0, jsx_runtime_1.jsx)(selectors_1.RadioSelector, { options: options, selectedValue: selectedRpc, onSelect: onSelect, className: `poly-rpc-radio-selector ${className}` }));
};
exports.RpcRadioSelector = RpcRadioSelector;
function loadRpc({ network, supportedRpcs = suitcase_core_1.RPC_ENDPOINTS[network], defaultRpc = supportedRpcs[0], }) {
    const storedRpc = localStorage.getItem(`polymedia.rpc.${network}`);
    if (storedRpc && supportedRpcs.includes(storedRpc)) {
        return storedRpc;
    }
    return defaultRpc;
}
/**
 * Change RPCs, update local storage, and optionally trigger a callback.
 */
function switchRpc({ network, newRpc, supportedRpcs = suitcase_core_1.RPC_ENDPOINTS[network], defaultRpc = supportedRpcs[0], onSwitch, }) {
    newRpc = supportedRpcs.includes(newRpc) ? newRpc : defaultRpc;
    localStorage.setItem(`polymedia.rpc.${network}`, newRpc);
    if (onSwitch) {
        onSwitch(newRpc);
    }
}
//# sourceMappingURL=rpcs.js.map