import { RefObject } from "react";
import { PaginatedResponse } from "@polymedia/suitcase-core";
export type UseFetchResult<T> = ReturnType<typeof useFetch<T>>;
export type UseFetchAndLoadMoreResult<T, C> = ReturnType<typeof useFetchAndLoadMore<T, C>>;
export type UseFetchAndPaginateResult<T, C> = ReturnType<typeof useFetchAndPaginate<T, C>>;
/**
 * A hook that detects when a click or touch event occurs outside a DOM element.
 *
 * @param domElementRef A React ref object pointing to the target DOM element.
 * @param onClickOutside Function to call when a click or touch is detected outside the target element.
 */
export declare function useClickOutside(domElementRef: RefObject<HTMLElement | null>, onClickOutside: () => void): void;
/**
 * A hook to handle data fetching.
 *
 * @template T The type of data returned by the fetch function
 * @param fetchFunction An async function that returns a `Promise<T>`
 * @param dependencies An array of dependencies that trigger a re-fetch when changed
 * @returns An object containing:
 *   - data: The fetched data
 *   - err: Any error that occurred
 *   - isLoading: Whether data is currently being fetched
 */
export declare function useFetch<T>(fetchFunction: () => Promise<T>, dependencies?: unknown[]): {
    data: T | undefined;
    err: string | null;
    isLoading: boolean;
    refetch: () => Promise<void>;
};
/**
/**
 * A hook to handle data fetching and loading more data.
 *
 * @template T The type of data returned by the fetch function
 * @template C The type of cursor used to paginate through the data
 * @param fetchFunction An async function that returns a `Promise<PaginatedResponse<T>>`
 * @param dependencies An array of dependencies that trigger a re-fetch when changed
 * @returns An object containing:
 *   - data: The fetched data
 *   - err: Any error that occurred
 *   - isLoading: Whether data is currently being fetched
 *   - hasNextPage: Whether there is a next page available to fetch
 *   - loadMore: A function to load more data
 */
export declare function useFetchAndLoadMore<T, C>(fetchFunction: (cursor: C | undefined) => Promise<PaginatedResponse<T, C>>, dependencies?: unknown[]): {
    data: T[];
    err: string | null;
    isLoading: boolean;
    hasNextPage: boolean;
    loadMore: () => Promise<void>;
};
/**
 * A hook to handle data fetching and paginating through the results.
 *
 * @template T The type of data returned by the fetch function
 * @template C The type of cursor used to paginate through the data
 * @param fetchFunction An async function that returns a `Promise<PaginatedResponse<T>>`
 * @param dependencies An array of dependencies that trigger a re-fetch when changed
 * @returns An object containing the following properties:
 *   - page: The current page of data
 *   - err: Any error that occurred during fetching
 *   - isLoading: Whether data is currently being fetched
 *   - hasMultiplePages: Whether there are multiple pages of data
 *   - isFirstPage: Whether the current page is the first page
 *   - isLastPage: Whether the current page is the last fetched page
 *   - hasNextPage: Whether there is a next page available to fetch
 *   - goToNextPage: Function to navigate to the next page
 *   - goToPreviousPage: Function to navigate to the previous page
 */
export declare function useFetchAndPaginate<T, C>(fetchFunction: (cursor: C | undefined) => Promise<PaginatedResponse<T, C>>, dependencies?: unknown[]): {
    page: T[];
    err: string | null;
    isLoading: boolean;
    hasMultiplePages: boolean;
    isFirstPage: boolean;
    isLastPage: boolean;
    hasNextPage: boolean;
    goToNextPage: () => Promise<void>;
    goToPreviousPage: () => void;
};
