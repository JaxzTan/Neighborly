import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef, useState } from "react";
import { useClickOutside } from "./hooks";
import { RadioSelector } from "./selectors";
/**
 * A radio button menu to select a Sui network and save the choice to local storage.
 */
export function NetworkRadioSelector(props) {
    const options = props.supportedNetworks.map(network => ({
        value: network,
        label: network
    }));
    const onSelect = (newNetwork) => {
        switchNetwork(newNetwork, props.supportedNetworks, props.onSwitch);
    };
    return (_jsx(RadioSelector, { options: options, selectedValue: props.selectedNetwork, onSelect: onSelect, className: `poly-network-radio-selector ${props.className ?? ""}` }));
}
/**
 * A dropdown menu to choose between mainnet/testnet/devnet/localnet.
 */
export function NetworkDropdownSelector(props) {
    const [isOpen, setIsOpen] = useState(false);
    const selectorRef = useRef(null);
    useClickOutside(selectorRef, () => { setIsOpen(false); });
    const SelectedOption = () => {
        return _jsx("div", { className: "network-option selected" /* onMouseEnter={() => setIsOpen(true)} */, children: _jsx("span", { className: "text", onClick: () => { !props.disabled && setIsOpen(true); }, children: props.currentNetwork }) });
    };
    const NetworkOptions = () => {
        const otherNetworks = props.supportedNetworks.filter(net => net !== props.currentNetwork);
        return _jsx("div", { className: "network-options", children: otherNetworks.map(net => (_jsx(NetworkOption, { network: net }, net))) });
    };
    const NetworkOption = ({ network }) => {
        return _jsx("div", { className: "network-option", children: _jsx("span", { className: "text", onClick: () => {
                    if (!props.disabled) {
                        switchNetwork(network, props.supportedNetworks, props.onSwitch);
                        setIsOpen(false);
                    }
                }, children: network }) });
    };
    return _jsxs("div", { id: props.id, className: "network-selector " + (props.disabled ? "disabled " : "") + (props.className ?? ""), ref: selectorRef, onMouseLeave: () => { setIsOpen(false); }, children: [_jsx(SelectedOption, {}), isOpen && _jsx(NetworkOptions, {})] });
}
/**
 * Check if the current hostname is a localhost environment.
 */
export function isLocalhost() {
    const hostname = window.location.hostname;
    const localNetworkPattern = /(^127\.)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)/;
    return hostname === "localhost" || localNetworkPattern.test(hostname);
}
/**
 * Load the network name based on URL parameters and local storage.
 */
export function loadNetwork(supportedNetworks, defaultNetwork) {
    if (!isNetworkName(defaultNetwork, supportedNetworks)) {
        throw new Error(`Network not supported: ${defaultNetwork}`);
    }
    // Use 'network' URL parameter, if valid
    const params = new URLSearchParams(window.location.search);
    const networkFromUrl = params.get("network");
    if (isNetworkName(networkFromUrl, supportedNetworks)) {
        params.delete("network");
        const newQuery = params.toString();
        const newUrl = window.location.pathname + (newQuery ? "?" + newQuery : "") + window.location.hash;
        window.history.replaceState({}, document.title, newUrl);
        localStorage.setItem("polymedia.network", networkFromUrl);
        return networkFromUrl;
    }
    // Use network from local storage, if valid
    const networkFromLocal = localStorage.getItem("polymedia.network");
    if (isNetworkName(networkFromLocal, supportedNetworks)) {
        return networkFromLocal;
    }
    // Use default network
    localStorage.setItem("polymedia.network", defaultNetwork);
    return defaultNetwork;
}
/**
 * Change networks, update local storage, and optionally trigger a callback.
 */
export function switchNetwork(newNetwork, supportedNetworks, onSwitch) {
    if (!isNetworkName(newNetwork, supportedNetworks)) {
        throw new Error(`Network not supported: ${newNetwork}`);
    }
    localStorage.setItem("polymedia.network", newNetwork);
    if (onSwitch) {
        onSwitch(newNetwork);
    }
    else {
        window.location.reload();
    }
}
function isNetworkName(value, supportedNetworks) {
    return value !== null && supportedNetworks.includes(value);
}
//# sourceMappingURL=networks.js.map