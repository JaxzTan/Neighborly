import { jsx as _jsx } from "react/jsx-runtime";
import { RPC_ENDPOINTS } from "@polymedia/suitcase-core";
import { RadioSelector } from "./selectors";
/**
 * A radio button menu to select an RPC endpoint and save the choice to local storage.
 */
export const RpcRadioSelector = ({ network, selectedRpc, supportedRpcs = RPC_ENDPOINTS[network], onSwitch, className = "", }) => {
    const options = supportedRpcs.map(rpc => ({
        value: rpc,
        label: rpc
    }));
    const onSelect = (newRpc) => {
        switchRpc({
            network,
            newRpc,
            supportedRpcs,
            defaultRpc: supportedRpcs[0],
            onSwitch
        });
    };
    return (_jsx(RadioSelector, { options: options, selectedValue: selectedRpc, onSelect: onSelect, className: `poly-rpc-radio-selector ${className}` }));
};
export function loadRpc({ network, supportedRpcs = RPC_ENDPOINTS[network], defaultRpc = supportedRpcs[0], }) {
    const storedRpc = localStorage.getItem(`polymedia.rpc.${network}`);
    if (storedRpc && supportedRpcs.includes(storedRpc)) {
        return storedRpc;
    }
    return defaultRpc;
}
/**
 * Change RPCs, update local storage, and optionally trigger a callback.
 */
export function switchRpc({ network, newRpc, supportedRpcs = RPC_ENDPOINTS[network], defaultRpc = supportedRpcs[0], onSwitch, }) {
    newRpc = supportedRpcs.includes(newRpc) ? newRpc : defaultRpc;
    localStorage.setItem(`polymedia.rpc.${network}`, newRpc);
    if (onSwitch) {
        onSwitch(newRpc);
    }
}
//# sourceMappingURL=rpcs.js.map