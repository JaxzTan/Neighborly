import { BcsType } from "@mysten/sui/bcs";
import { DynamicFieldInfo, SuiClient, SuiExecutionResult, SuiObjectRef } from "@mysten/sui/client";
import { Transaction, TransactionResult } from "@mysten/sui/transactions";
/**
 * Call `SuiClient.devInspectTransactionBlock()` and return the execution results.
 */
export declare function devInspectAndGetExecutionResults(suiClient: SuiClient, tx: Transaction | Uint8Array | string, sender?: string): Promise<SuiExecutionResult[]>;
/**
 * Call `SuiClient.devInspectTransactionBlock()` and return the deserialized return values.
 * @returns An array with the deserialized return values of each transaction in the TransactionBlock.
 *
 * @example
    ```
    const blockReturnValues = await devInspectAndGetReturnValues(suiClient, tx, [
        [
            bcs.vector(bcs.Address),
            bcs.Bool,
            bcs.U64,
        ],
    ]);
    ```
 */
export declare function devInspectAndGetReturnValues<T extends any[]>(suiClient: SuiClient, tx: Transaction | Uint8Array | string, blockParsers: BcsType<T[number]>[][], sender?: string): Promise<T[]>;
/**
 * Get dynamic object fields owned by an object.
 * If limit is not specified, fetch all DOFs.
 */
export declare function fetchDynamicFields({ client, parentId, limit, cursor, sleepMsBetweenReqs, onUpdate, }: {
    client: SuiClient;
    parentId: string;
    limit?: number;
    cursor?: string | null | undefined;
    sleepMsBetweenReqs?: number;
    onUpdate?: (msg: string) => unknown;
}): Promise<{
    data: DynamicFieldInfo[];
    hasNextPage: boolean;
    cursor: string | null | undefined;
}>;
/**
 * Get a `Coin<T>` of a given value from the owner. Handles coin merging and splitting.
 * Assumes that the owner has enough balance.
 * @deprecated Use `coinWithBalance` from `@mysten/sui` instead.
 */
export declare function getCoinOfValue(suiClient: SuiClient, tx: Transaction, owner: string, coinType: string, coinValue: number | bigint): Promise<TransactionResult>;
/**
 * Fetch the latest version of an object and return its `SuiObjectRef`.
 */
export declare function getSuiObjectRef(suiClient: SuiClient, objectId: string): Promise<SuiObjectRef>;
