import { Keypair } from "@mysten/sui/cryptography";
import React from "react";
/**
 * The result of an input validation.
 */
export type ValidationResult<T> = {
    err: string | null;
    val: T | undefined;
};
/**
 * A function that validates a raw input string and returns an error message or the value.
 * Runs after the hook's internal validation.
 */
export type InputValidator<T> = (input: string) => ValidationResult<T>;
/**
 * A function that validates a processed value and returns an error message or the value.
 * Runs after the hook's internal validation and after the user-provided `validateInput`.
 */
export type ValueValidator<T> = (val: T) => ValidationResult<T>;
/**
 * Common props for all kinds of inputs.
 */
export type CommonInputProps<T> = {
    label?: React.ReactNode;
    msgRequired?: string;
    onChangeVal?: (val: T | undefined) => void;
    validateInput?: InputValidator<T>;
    validateValue?: ValueValidator<T>;
};
/**
 * The state and rendered element returned by input hooks.
 */
export type InputResult<T> = {
    str: string;
    val: T | undefined;
    err: string | null;
    input: React.ReactElement;
    clear: () => void;
};
/**
 * Props for `<input>` fields.
 */
export type InputProps<T> = CommonInputProps<T> & {
    html?: React.InputHTMLAttributes<HTMLInputElement>;
};
/**
 * A base hook for creating `<input>` fields.
 */
export declare const useInputBase: <T>(props: InputProps<T> & {
    validate: InputValidator<T>;
    deps: React.DependencyList;
}) => InputResult<T>;
/**
 * An input field for strings.
 */
export declare const useInputString: (props: InputProps<string> & {
    minLength?: number;
    maxLength?: number;
    minBytes?: number;
    maxBytes?: number;
    msgTooShort?: string;
    msgTooLong?: string;
}) => InputResult<string>;
/**
 * An input field for Sui addresses (or object IDs).
 */
export declare const useInputAddress: (props: InputProps<string>) => InputResult<string>;
/**
 * An input field for Sui private keys that produces a Sui Keypair.
 */
export declare const useInputPrivateKey: (props: InputProps<Keypair>) => InputResult<Keypair>;
/**
 * An input field for positive integers.
 */
export declare const useInputUnsignedInt: (props: InputProps<number> & {
    min?: number;
    max?: number;
    msgTooSmall?: string;
    msgTooLarge?: string;
}) => InputResult<number>;
/**
 * Input field for positive Coin balances. Handles decimals (e.g. `"1 SUI"` â†’ `1_000_000_000`).
 */
export declare const useInputUnsignedBalance: (props: InputProps<bigint> & {
    decimals: number;
    min?: bigint;
    max?: bigint;
    msgTooSmall?: string;
    msgTooLarge?: string;
}) => InputResult<bigint>;
/**
 * Props for `<textarea>` fields.
 */
export type TextAreaProps<T> = Omit<CommonInputProps<T>, "validateValue"> & {
    html?: React.TextareaHTMLAttributes<HTMLTextAreaElement>;
    validateInput: InputValidator<T>;
    deps: React.DependencyList;
};
/**
 * A <textarea> field with custom validation.
 */
export declare const useTextArea: <T>(props: TextAreaProps<T>) => InputResult<T>;
export type DropdownOption<T extends string> = {
    value: T;
    label: string;
};
/**
 * Props for `<select>` fields.
 */
export type DropdownProps<T extends string> = Omit<CommonInputProps<T>, "validateInput" | "validateValue"> & {
    options: DropdownOption<T>[];
    html?: React.SelectHTMLAttributes<HTMLSelectElement> & {
        value?: T;
    };
};
export type DropdownResult<T extends string> = Omit<InputResult<T>, "str">;
/**
 * A <select> dropdown.
 */
export declare const useDropdown: <T extends string>(props: DropdownProps<T>) => DropdownResult<T>;
